// <auto-generated />
using System;
using Fate.Project.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fate.ProjectAPI.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.PrjectVisibleRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.Property<string>("Tags");

                    b.Property<bool?>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("PrjectVisibleRule");
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId");

                    b.Property<string>("AreaName")
                        .HasMaxLength(50);

                    b.Property<string>("Avatar")
                        .HasColumnName("Avatar")
                        .HasMaxLength(100);

                    b.Property<int?>("BrokerageOptions");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<int?>("CityId");

                    b.Property<string>("Company")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<int?>("FinMoney");

                    b.Property<string>("FinPercentage")
                        .HasMaxLength(50);

                    b.Property<string>("FinStage")
                        .HasMaxLength(50);

                    b.Property<string>("FormatBPFile")
                        .HasMaxLength(100);

                    b.Property<int?>("Income");

                    b.Property<string>("Introduction")
                        .HasMaxLength(500);

                    b.Property<bool?>("OnPlatform");

                    b.Property<string>("OriginBPFile")
                        .HasMaxLength(100);

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("ReferenceId");

                    b.Property<DateTime?>("RegisterTime");

                    b.Property<int?>("Revenue");

                    b.Property<bool?>("ShowSecurityInfo");

                    b.Property<int?>("SourceId");

                    b.Property<string>("Tags")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserId");

                    b.Property<int?>("Valuation");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.ProjectContributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<int?>("ContributorType");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<bool?>("IsCloser");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectContributor");
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.ProjectProperty", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectId");

                    b.Property<string>("Text");

                    b.HasKey("Key", "Value", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProperty");
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.ProjectViewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectViewer");
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.PrjectVisibleRule", b =>
                {
                    b.HasOne("Fate.Project.Domain.AggregatesModel.Project")
                        .WithOne("VisibleRule")
                        .HasForeignKey("Fate.Project.Domain.AggregatesModel.PrjectVisibleRule", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.ProjectContributor", b =>
                {
                    b.HasOne("Fate.Project.Domain.AggregatesModel.Project")
                        .WithMany("Contributors")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.ProjectProperty", b =>
                {
                    b.HasOne("Fate.Project.Domain.AggregatesModel.Project")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fate.Project.Domain.AggregatesModel.ProjectViewer", b =>
                {
                    b.HasOne("Fate.Project.Domain.AggregatesModel.Project")
                        .WithMany("Viewers")
                        .HasForeignKey("ProjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
